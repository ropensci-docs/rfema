[{"path":"https://docs.ropensci.org/rfema/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"plan contribute code amount substantial change package, please first outline planned change issue can discussed get community feedback. Contributors asked comply code conduct wish remain associated project.","code":""},{"path":"https://docs.ropensci.org/rfema/CONTRIBUTING.html","id":"pull-requests","dir":"","previous_headings":"","what":"Pull Requests","title":"Contributing","text":"Pull requests welcome. rfema generally follows style laid Hadley Wickham Jennifer Bryan’s R Packages. Conforming development practices mean review pull request faster smoother.","code":""},{"path":"https://docs.ropensci.org/rfema/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Dylan Turner Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://docs.ropensci.org/rfema/articles/getting_started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"rfema: Getting Started","text":"vignette provides brief overview using rfema package obtain data Open FEMA API. rest vignette covers install package, followed examples using package obtain data various objectives.","code":""},{"path":"https://docs.ropensci.org/rfema/articles/getting_started.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"rfema: Getting Started","text":"Right now, best way install use rfema package installing directly rOpenSci using install.packages(\"rfema\", repos = \"https://ropensci.r-universe.dev\"). FEMA API require API key, meaning setup steps need taken start using package","code":""},{"path":"https://docs.ropensci.org/rfema/articles/getting_started.html","id":"available-datasets","dir":"Articles","previous_headings":"","what":"Available Datasets","title":"rfema: Getting Started","text":"unfamiliar data sets available FEMA API, good starting place visit FEMA API documentation page. However, already familiar data want quickly reference data set names another piece meta data, using fema_data_sets() function obtain tibble available data sets along associated meta data convenient option.","code":"# store the avaliable data sets as an object in your R environment that can be referenced later data_sets <- fema_data_sets()   # view data  data_sets ## # A tibble: 51 × 35 ##    identifier  name     title descr…¹ webSe…² dataD…³ keyword modif…⁴ publi…⁵ conta…⁶ mbox  acces…⁷ ##    <chr>       <chr>    <chr> <chr>   <chr>   <chr>   <list>  <chr>   <chr>   <chr>   <chr> <chr>   ##  1 openfema-53 Registr… Regi… \"This … https:… https:… <list>  2023-0… Federa… OpenFE… open… public  ##  2 openfema-68 NfipCom… NFIP… \"This … https:… https:… <list>  2023-0… Federa… OpenFE… open… public  ##  3 openfema-14 Registr… Regi… \"This … https:… https:… <list>  2023-1… Federa… OpenFE… open… public  ##  4 openfema-45 HazardM… Haza… \"The d… https:… https:… <list>  2023-1… Federa… OpenFE… open… public  ##  5 openfema-54 Housing… Hous… \"This … https:… https:… <list>  2023-0… Federa… OpenFE… open… public  ##  6 openfema-55 Housing… Hous… \"The d… https:… https:… <list>  2023-0… Federa… OpenFE… open… public  ##  7 openfema-34 Individ… Indi… \"This … https:… https:… <list>  2020-0… Federa… OpenFE… open… public  ##  8 openfema-24 FemaWeb… FEMA… \"This … https:… https:… <list>  2023-0… Federa… OpenFE… open… public  ##  9 openfema-33 Mission… Miss… \"1.1 W… https:… https:… <list>  2023-0… Federa… OpenFE… open… public  ## 10 openfema-25 FemaWeb… FEMA… \"This … https:… https:… <list>  2023-0… Federa… OpenFE… open… public  ## # … with 41 more rows, 23 more variables: landingPage <list>, temporal <list>, api <lgl>, ## #   version <int>, bureauCode <chr>, programCode <chr>, license <list>, theme <list>, ## #   dataQuality <chr>, accrualPeriodicity <list>, language <chr>, references <list>, ## #   issued <list>, recordCount <list>, depDate <list>, depApiMessage <list>, depWebMessage <list>, ## #   depNewURL <list>, hash <chr>, lastRefresh <chr>, id <chr>, lastDataSetRefresh <list>, ## #   distribution <list>, and abbreviated variable names ¹​description, ²​webService, ## #   ³​dataDictionary, ⁴​modified, ⁵​publisher, ⁶​contactPoint, ⁷​accessLevel # print out just the names of the avaliable data sets without all the other meta data paste(data_sets$title, sep = \", \") ##  [1] \"Registration Intake and Individuals Household Program (RI-IHP)\" ##  [2] \"NFIP Community Assistance Visits\"                               ##  [3] \"Registration Intake and Individuals Household Program (RI-IHP)\" ##  [4] \"Hazard Mitigation Assistance Projects\"                          ##  [5] \"Housing Assistance Program Data - Owners\"                       ##  [6] \"Housing Assistance Program Data - Renters\"                      ##  [7] \"Individuals and Households Program - Valid Registrations\"       ##  [8] \"FEMA Web Disaster Summaries\"                                    ##  [9] \"Mission Assignments\"                                            ## [10] \"FEMA Web Disaster Declarations\"                                 ## [11] \"Disaster Declarations Summaries\"                                ## [12] \"OpenFEMA Data Set Fields\"                                       ## [13] \"Disaster Declarations Summaries\"                                ## [14] \"Hazard Mitigation Grant Program - Property Acquisitions\"        ## [15] \"FEMA Web Declaration Areas\"                                     ## [16] \"Housing Assistance Program Data - Renters\"                      ## [17] \"IPAWS Archived Alerts\"                                          ## [18] \"Hazard Mitigation Assistance Projects\"                          ## [19] \"FIMA NFIP Redacted Claims\"                                      ## [20] \"FIMA NFIP Redacted Claims\"                                      ## [21] \"Emergency Management Performance Grants\"                        ## [22] \"FEMA Regions\"                                                   ## [23] \"Emergency Management Performance Grants\"                        ## [24] \"Non-Disaster and Assistance to Firefighter Grants\"              ## [25] \"Hazard Mitigation Assistance Mitigated Properties\"              ## [26] \"Hazard Mitigation Grant Program - Disaster Summaries\"           ## [27] \"FEMA Regions\"                                                   ## [28] \"Hazard Mitigation Assistance Mitigated Properties\"              ## [29] \"Individual Assistance Housing Registrants - Large Disasters\"    ## [30] \"HMA Subapplications Project Site Inventories\"                   ## [31] \"HMA Subapplications\"                                            ## [32] \"FIMA NFIP Redacted Policies\"                                    ## [33] \"HMA Subapplications By NFIP CRS Communities\"                    ## [34] \"Hazard Mitigation Grants\"                                       ## [35] \"Housing Assistance Program Data - Owners\"                       ## [36] \"NFIP Community Engagements\"                                     ## [37] \"FIMA NFIP Redacted Policies\"                                    ## [38] \"OpenFEMA Data Sets\"                                             ## [39] \"Public Assistance Applicants\"                                   ## [40] \"Hazard Mitigation Assistance Mitigated Properties\"              ## [41] \"Declaration Denials\"                                            ## [42] \"Hazard Mitigation Plan Statuses\"                                ## [43] \"NFIP Community Assistance Contacts\"                             ## [44] \"Public Assistance Funded Projects Details\"                      ## [45] \"Public Assistance Funded Project Summaries\"                     ## [46] \"Public Assistance Grant Award Activities\"                       ## [47] \"Hazard Mitigation Assistance Projects\"                          ## [48] \"Hazard Mitigation Grant Program - Disaster Summaries\"           ## [49] \"Public Assistance Applicants Program Deliveries\"                ## [50] \"Hazard Mitigation Assistance Projects by NFIP CRS Communities\"  ## [51] \"NFIP Community Status Book\""},{"path":"https://docs.ropensci.org/rfema/articles/getting_started.html","id":"example-workflow","dir":"Articles","previous_headings":"","what":"Example Workflow","title":"rfema: Getting Started","text":"know data set want access, perhaps want know data available given data set, can use fema_data_fields() function get look available data fields given data set setting “data_set” parameter one “name” columns data frame returned fema_data_sets() function. FEMA API limits number records can returned single query 1000, meaning want observations , loop necessary iterate multiple API calls. open_fema function handles process automatically, default issue warning letting know many records match criteria many API calls take retrieve records ask confirm request starts retrieving data (behavior can turned setting ask_before_call argument FALSE). Additionally estimated time issued give sense long take complete request. example, requesting entire NFIP claims data set via open_fema(data_set = \"fimaNfipClaims\") yield following output R console. Note estimated time based network conditions initial time call made may accurate large data requests take long enough network conditions potential change significantly request. aside, large data requests, like downloading entire data set, usually faster perform bulk download using bulk_dl function. Alternatively, specify top_n argument limit number records returned. Specifying top_n greater 1000 initiate message letting know many iterations take get data. top_n less 1000, API call automatically carried . case , return first 10 records NFIP Claims data. wanted limit columns returned passing character vector data fields included returned data frame. data fields given data set can retrieved using fema_data_fields() function. case return policyCount countyCode columns. want limit rows returned rather columns, can also apply filters specifying values columns return. want quickly see set variables can used filter API queries , can use valid_parameters() function return tibble containing variables “searchable” particular data set. can see waterDepth ratedfloodZone searchable variables. Thus can specify list contains values variable want returned. however, can useful learn bit parameter using parameter_values() function. can seen, parameter_values() returns data set name, data field (.e. searchable parameter), description data field, vector examples data field values can useful seeing values formatted data. can see ratedFloodZone character data description know “AE” “X” valid values ratedFloodZone parameter. can thus define filter return records AE X flood zones.","code":"# obtain all the data fields for the NFIP Policies data set df <- fema_data_fields(data_set = \"fimaNfipPolicies\") ##  Obtaining Data: 1 out of 2 iterations (50% complete) Obtaining Data: 2 out of 2 iterations (100% ## complete) # Note: the data set field is not case sensative, meaning you do not need to  # use camel case names despite that being the convention in the FEMA documentation. df <- fema_data_fields(data_set = \"fimanfippolicies\")  # view the data fields  df ## # A tibble: 127 × 15 ##    datase…¹ openF…² datas…³ name  title descr…⁴ type  sortO…⁵ isSea…⁶ isNes…⁷ isNul…⁸ prima…⁹ id    ##    <chr>    <chr>   <chr>   <chr> <chr> <chr>   <chr> <chr>   <chr>   <chr>   <chr>   <chr>   <chr> ##  1 openfem… FimaNf… 2       poli… Poli… Date u… date  29      TRUE    FALSE   TRUE    FALSE   3558… ##  2 openfem… FimaNf… 1       base… Base… Baseme… smal… 3       TRUE    FALSE   FALSE   FALSE   689d… ##  3 openfem… FimaNf… 1       cond… Cond… This i… text  6       TRUE    FALSE   FALSE   FALSE   ca12… ##  4 openfem… FimaNf… 1       crsC… CRS … The Co… smal… 9       TRUE    FALSE   FALSE   FALSE   1923… ##  5 openfem… FimaNf… 1       dedu… Dedu… The to… text  10      TRUE    FALSE   FALSE   FALSE   a3fb… ##  6 openfem… FimaNf… 1       dedu… Dedu… The to… text  11      TRUE    FALSE   FALSE   FALSE   7c1b… ##  7 openfem… FimaNf… 1       elev… Elev… Yes (Y… bool… 12      TRUE    FALSE   FALSE   FALSE   e9b1… ##  8 openfem… FimaNf… 1       elev… Elev… Indica… text  13      TRUE    FALSE   FALSE   FALSE   b59e… ##  9 openfem… FimaNf… 1       floo… Floo… NFIP F… text  16      TRUE    FALSE   FALSE   FALSE   42ac… ## 10 openfem… FimaNf… 1       loca… Loca… Code t… smal… 20      TRUE    FALSE   FALSE   FALSE   a72e… ## # … with 117 more rows, 2 more variables: lastRefresh <chr>, hash <chr>, and abbreviated variable ## #   names ¹​datasetId, ²​openFemaDataSet, ³​datasetVersion, ⁴​description, ⁵​sortOrder, ⁶​isSearchable, ## #   ⁷​isNestedObject, ⁸​isNullable, ⁹​primaryKey Calculating estimated API call time... 2600579 matching records found. At 1000 records per call, it will take 2601 individual API calls to get all matching records. It's estimated that this will take approximately 2.12 hours. Continue?  1 - Yes, get that data!, 0 - No, let me rethink my API call: df <- open_fema(data_set = \"fimaNfipClaims\", top_n = 10)  df ## # A tibble: 10 × 73 ##    agricu…¹ asOfDate            basem…² polic…³ crsCl…⁴ dateOfLoss          eleva…⁵ eleva…⁶ eleva…⁷ ##    <chr>    <dttm>              <chr>   <chr>   <chr>   <dttm>              <chr>   <chr>   <chr>   ##  1 FALSE    2020-01-22 00:00:00 NULL    1       8       1998-02-07 00:00:00 FALSE   NULL    NULL    ##  2 FALSE    2020-01-22 00:00:00 NULL    1       8       2005-08-29 00:00:00 FALSE   NULL    NULL    ##  3 FALSE    2020-01-22 00:00:00 NULL    1       9       1998-09-28 00:00:00 FALSE   NULL    NULL    ##  4 FALSE    2019-09-19 00:00:00 1       1       9       1994-10-07 00:00:00 FALSE   NULL    NULL    ##  5 FALSE    2019-09-19 00:00:00 NULL    1       8       1996-03-11 00:00:00 FALSE   NULL    NULL    ##  6 FALSE    2020-01-22 00:00:00 NULL    1       NULL    1998-02-03 00:00:00 TRUE    NULL    NULL    ##  7 FALSE    2020-01-22 00:00:00 NULL    1       5       2017-08-27 00:00:00 FALSE   NULL    NULL    ##  8 FALSE    2019-10-19 00:00:00 NULL    1       NULL    1992-09-11 00:00:00 FALSE   NULL    NULL    ##  9 FALSE    2019-10-19 00:00:00 NULL    1       8       1998-09-28 00:00:00 FALSE   NULL    NULL    ## 10 FALSE    2019-09-19 00:00:00 NULL    1       8       1995-03-11 00:00:00 FALSE   NULL    NULL    ## # … with 64 more variables: baseFloodElevation <chr>, ratedFloodZone <chr>, houseWorship <chr>, ## #   locationOfContents <chr>, lowestAdjacentGrade <chr>, lowestFloorElevation <chr>, ## #   numberOfFloorsInTheInsuredBuilding <chr>, nonProfitIndicator <chr>, obstructionType <chr>, ## #   occupancyType <chr>, originalConstructionDate <dttm>, originalNBDate <dttm>, ## #   amountPaidOnBuildingClaim <chr>, amountPaidOnContentsClaim <chr>, ## #   amountPaidOnIncreasedCostOfComplianceClaim <chr>, postFIRMConstructionIndicator <chr>, ## #   rateMethod <chr>, smallBusinessIndicatorBuilding <chr>, … data_fields <- fema_data_fields(\"fimanfipclaims\")  data_fields ## # A tibble: 113 × 15 ##    datase…¹ openF…² datas…³ name  title descr…⁴ type  sortO…⁵ isSea…⁶ isNes…⁷ isNul…⁸ prima…⁹ id    ##    <chr>    <chr>   <chr>   <chr> <chr> <chr>   <chr> <chr>   <chr>   <chr>   <chr>   <chr>   <chr> ##  1 openfem… FimaNf… 2       wate… Wate… Depth … smal… 61      TRUE    FALSE   TRUE    FALSE   7e46… ##  2 openfem… FimaNf… 1       base… Base… Baseme… smal… 4       TRUE    FALSE   FALSE   FALSE   be90… ##  3 openfem… FimaNf… 1       cond… Cond… This i… text  6       TRUE    FALSE   FALSE   FALSE   8690… ##  4 openfem… FimaNf… 1       comm… Comm… The Co… smal… 9       TRUE    FALSE   FALSE   FALSE   264c… ##  5 openfem… FimaNf… 1       elev… Elev… Indica… smal… 12      TRUE    FALSE   TRUE    FALSE   a63c… ##  6 openfem… FimaNf… 1       floo… Floo… Flood … text  15      TRUE    FALSE   TRUE    FALSE   f727… ##  7 openfem… FimaNf… 1       loca… Loca… Code t… smal… 18      TRUE    FALSE   TRUE    FALSE   9720… ##  8 openfem… FimaNf… 1       numb… Numb… Code t… smal… 22      TRUE    FALSE   FALSE   FALSE   56d6… ##  9 openfem… FimaNf… 1       obst… Obst… Code t… smal… 24      TRUE    FALSE   TRUE    FALSE   85b2… ## 10 openfem… FimaNf… 1       occu… Occu… Code i… smal… 25      TRUE    FALSE   FALSE   FALSE   7c3b… ## # … with 103 more rows, 2 more variables: lastRefresh <chr>, hash <chr>, and abbreviated variable ## #   names ¹​datasetId, ²​openFemaDataSet, ³​datasetVersion, ⁴​description, ⁵​sortOrder, ⁶​isSearchable, ## #   ⁷​isNestedObject, ⁸​isNullable, ⁹​primaryKey df <- open_fema(data_set = \"fimaNfipClaims\", top_n = 10, select = c(\"policyCount\",\"countyCode\"))  df ## # A tibble: 10 × 2 ##    policyCount countyCode ##    <chr>       <chr>      ##  1 1           06073      ##  2 1           22071      ##  3 1           12113      ##  4 1           45013      ##  5 1           12009      ##  6 1           51810      ##  7 1           48201      ##  8 1           15003      ##  9 1           12087      ## 10 1           06053 params <- valid_parameters(data_set = \"fimaNfipClaims\")  params ## # A tibble: 63 × 1 ##    params                             ##    <chr>                              ##  1 waterDepth                         ##  2 basementEnclosureCrawlspaceType    ##  3 crsClassificationCode              ##  4 elevationCertificateIndicator      ##  5 elevationDifference                ##  6 ratedFloodZone                     ##  7 locationOfContents                 ##  8 numberOfFloorsInTheInsuredBuilding ##  9 obstructionType                    ## 10 buildingDeductibleCode             ## # … with 53 more rows # get more information onf the \"ratedfloodZone\" parameter from the NFIP Claims data set parameter_values(data_set = \"fimaNfipClaims\",data_field = \"ratedFloodZone\") ## Data Set: FimaNfipClaims ## Data Field: ratedFloodZone ## Data Field Description: Formerly called floodZone. NFIP Flood Zone derived from the Flood Insurance Rate Map (FIRM) used to rate the insured property.A - Special Flood with no Base Flood Elevation on FIRM; AE, A1-A30 - Special Flood with Base Flood Elevation on FIRM; A99 - Special Flood with Protection Zone; AH, AHB* - Special Flood with Shallow Ponding; AO, AOB* - Special Flood with Sheet Flow; X, B - Moderate Flood from primary water source.  Pockets of areas subject to drainage problems; X, C - Minimal Flood from primary water source.  Pockets of areas subject to drainage problems; D - Possible Flood; V - Velocity Flood with no Base Flood Elevation on FIRM; VE, V1-V30 - Velocity Flood with Base Flood Elevation on FIRM; AE, VE, X - New zone designations used on new maps starting January 1, 1986, in lieu of A1-A30, V1-V30, and B and C; AR - A Special Flood Hazard Area that results from the decertification of a previously accredited flood protection system that is determined to be in the process of being restored to provide base flood protection;AR Dual Zones - (AR/AE, AR/A1-A30, AR/AH, AR/AO, AR/A) Areas subject to flooding from failure of the flood protection system (Zone AR) which also overlap an existing Special Flood Hazard Area as a dual zone; *AHB, AOB, ARE, ARH, ARO, and ARA are not risk zones shown on a map, but are acceptable values for rating purposes ## Data Field Example Values: c(\"X\", \"AE\", \"VE\", \"NULL\", \"C\", \"V\") ## More Information Available at: https://www.fema.gov/about/openfema/data-sets # construct a filter that limits records to those in AE flood zones my_filters <- list(ratedFloodZone = c(\"AE\",\"X\"))  # pass the filter to the open_fema function. df <- open_fema(data_set = \"fimaNfipclaims\", top_n = 10,                 select = c(\"policyCount\",\"ratedFloodZone\"),                filters = my_filters)   df ## # A tibble: 10 × 2 ##    policyCount ratedFloodZone ##    <chr>       <chr>          ##  1 1           X              ##  2 1           X              ##  3 1           X              ##  4 1           X              ##  5 1           X              ##  6 1           AE             ##  7 1           X              ##  8 1           AE             ##  9 1           AE             ## 10 1           X"},{"path":[]},{"path":"https://docs.ropensci.org/rfema/articles/getting_started.html","id":"example-return-the-first-100-nfip-claims-for-florida-that-happened-between-2010-and-2020-","dir":"Articles","previous_headings":"More Examples","what":"Example: Return the first 100 NFIP claims for Florida that happened between 2010 and 2020.","title":"rfema: Getting Started","text":"","code":"df <- open_fema(data_set = \"fimaNfipClaims\",                  top_n = 100,                  filters = list(state = \"FL\",                                 yearOfLoss = \">= 2010\",                                 yearOfLoss = \"<= 2020\"))  df ## # A tibble: 100 × 73 ##    agricu…¹ asOfDate            basem…² polic…³ crsCl…⁴ dateOfLoss          eleva…⁵ eleva…⁶ eleva…⁷ ##    <chr>    <dttm>              <chr>   <chr>   <chr>   <dttm>              <chr>   <chr>   <chr>   ##  1 FALSE    2020-01-22 00:00:00 NULL    1       7       2012-09-06 00:00:00 FALSE   NULL    3       ##  2 FALSE    2020-01-22 00:00:00 NULL    1       7       2017-10-07 00:00:00 FALSE   NULL    NULL    ##  3 FALSE    2021-10-20 00:00:00 NULL    1       6       2014-04-30 00:00:00 TRUE    NULL    -3      ##  4 FALSE    2020-01-22 00:00:00 NULL    1       5       2017-09-10 00:00:00 FALSE   NULL    NULL    ##  5 FALSE    2022-06-17 00:00:00 NULL    1       7       2017-09-09 00:00:00 FALSE   NULL    NULL    ##  6 FALSE    2020-01-22 00:00:00 NULL    1       6       2012-06-09 00:00:00 FALSE   NULL    NULL    ##  7 FALSE    2020-01-22 00:00:00 NULL    1       8       2011-10-08 00:00:00 FALSE   NULL    NULL    ##  8 FALSE    2020-01-22 00:00:00 NULL    1       6       2014-04-29 00:00:00 FALSE   NULL    NULL    ##  9 FALSE    2020-01-22 00:00:00 NULL    1       5       2012-06-24 00:00:00 FALSE   NULL    NULL    ## 10 FALSE    2023-07-31 00:00:00 NULL    1       7       2014-04-29 00:00:00 TRUE    NULL    3       ## # … with 90 more rows, 64 more variables: baseFloodElevation <chr>, ratedFloodZone <chr>, ## #   houseWorship <chr>, locationOfContents <chr>, lowestAdjacentGrade <chr>, ## #   lowestFloorElevation <chr>, numberOfFloorsInTheInsuredBuilding <chr>, ## #   nonProfitIndicator <chr>, obstructionType <chr>, occupancyType <chr>, ## #   originalConstructionDate <dttm>, originalNBDate <dttm>, amountPaidOnBuildingClaim <chr>, ## #   amountPaidOnContentsClaim <chr>, amountPaidOnIncreasedCostOfComplianceClaim <chr>, ## #   postFIRMConstructionIndicator <chr>, rateMethod <chr>, smallBusinessIndicatorBuilding <chr>, …"},{"path":"https://docs.ropensci.org/rfema/articles/getting_started.html","id":"example-get-data-on-all-hazard-mitigation-assistance-projects-associated-with-flood-mitigation-in-florida-","dir":"Articles","previous_headings":"More Examples","what":"Example: Get data on all Hazard Mitigation Assistance Projects associated with flood mitigation in Florida.","title":"rfema: Getting Started","text":"","code":"# see which parameter can be used for filtering the Hazard Mitigation Grants data set valid_parameters(\"HazardMitigationAssistanceProjects\") ## # A tibble: 29 × 1 ##    params            ##    <chr>             ##  1 status            ##  2 subrecipient      ##  3 projectIdentifier ##  4 programArea       ##  5 programFy         ##  6 region            ##  7 state             ##  8 stateNumberCode   ##  9 county            ## 10 countyCode        ## # … with 19 more rows # see how values of \"programArea\" are formatted params <- parameter_values(data_set = \"HazardMitigationAssistanceProjects\", data_field = \"programArea\", message = F)  params ## # A tibble: 3 × 4 ##   `Data Set`                         `Data Field` `Data Field Description`                 Data F…¹ ##   <chr>                              <chr>        <chr>                                    <list>   ## 1 HazardMitigationAssistanceProjects programArea  Hazard Mitigation Assistance grant prog… <tibble> ## 2 HazardMitigationAssistanceProjects programArea  Hazard Mitigation Assistance grant prog… <tibble> ## 3 HazardMitigationAssistanceProjects programArea  Hazard Mitigation Assistance grant prog… <tibble> ## # … with abbreviated variable name ¹​`Data Field Example Values` # check to see how \"state\" is formatted params <- parameter_values(data_set = \"HazardMitigationAssistanceProjects\", data_field = \"state\", message = F)  params ## # A tibble: 3 × 4 ##   `Data Set`                         `Data Field` `Data Field Description`                 Data F…¹ ##   <chr>                              <chr>        <chr>                                    <list>   ## 1 HazardMitigationAssistanceProjects state        Full name of the State (e.g., Virginia)… <tibble> ## 2 HazardMitigationAssistanceProjects state        Full name of the State (e.g., Virginia)… <tibble> ## 3 HazardMitigationAssistanceProjects state        Full name of the State (e.g., Virginia)… <tibble> ## # … with abbreviated variable name ¹​`Data Field Example Values` # construct a list containing filters for Flood Mitigation Assistance projects in Florida filter_list <- c(programArea = c(\"FMA\"),                  state = c(\"Florida\"))   # pass filter_list to the open_fema function to retreieve data. df <- open_fema(data_set = \"HazardMitigationAssistanceProjects\", filters = filter_list,                 ask_before_call = FALSE)  df ## # A tibble: 345 × 31 ##    projectIden…¹ progr…² progr…³ region state state…⁴ county count…⁵ disas…⁶ proje…⁷ proje…⁸ status ##    <chr>         <chr>   <chr>   <chr>  <chr> <chr>   <chr>  <chr>   <chr>   <chr>   <chr>   <chr>  ##  1 FMA-PJ-04-FL… FMA     2005    4      Flor… 12      Browa… 11      NULL    BROWARD 405.1:… Closed ##  2 FMA-PJ-04-FL… FMA     2005    4      Flor… 12      Volus… 127     NULL    VOLUSIA 200.1:… Closed ##  3 FMA-PJ-04-FL… FMA     2017    4      Flor… 12      Clay   19      NULL    CLAY    200.1:… Closed ##  4 FMA-PJ-04-FL… FMA     2018    4      Flor… 12      Clay   19      NULL    CLAY    202.1:… Oblig… ##  5 FMA-PJ-04-FL… FMA     2008    4      Flor… 12      Volus… 127     NULL    VOLUSIA 202.2:… Closed ##  6 FMA-PJ-04-FL… FMA     2007    4      Flor… 12      Volus… 127     NULL    VOLUSIA 202.1:… Closed ##  7 FMA-PJ-04-FL… FMA     2009    4      Flor… 12      Volus… 127     NULL    VOLUSIA 202.1:… Closed ##  8 FMA-PJ-04-FL… FMA     2016    4      Flor… 12      Volus… 127     NULL    VOLUSIA 200.1:… Closed ##  9 FMA-PJ-04-FL… FMA     2009    4      Flor… 12      Volus… 127     NULL    VOLUSIA 200.2:… Closed ## 10 FMA-PJ-04-FL… FMA     2012    4      Flor… 12      Volus… 127     NULL    VOLUSIA 202.1:… Closed ## # … with 335 more rows, 19 more variables: recipient <chr>, recipientTribalIndicator <chr>, ## #   subrecipient <chr>, subrecipientTribalIndicator <chr>, dataSource <chr>, dateApproved <dttm>, ## #   dateClosed <dttm>, dateInitiallyApproved <dttm>, projectAmount <chr>, ## #   federalShareObligated <chr>, subrecipientAdminCostAmt <chr>, srmcObligatedAmt <chr>, ## #   recipientAdminCostAmt <chr>, costSharePercentage <chr>, benefitCostRatio <chr>, ## #   netValueBenefits <chr>, numberOfFinalProperties <chr>, numberOfProperties <chr>, id <chr>, and ## #   abbreviated variable names ¹​projectIdentifier, ²​programArea, ³​programFy, ⁴​stateNumberCode, …"},{"path":"https://docs.ropensci.org/rfema/articles/getting_started.html","id":"example-determine-how-much-money-was-awarded-by-fema-for-rental-assistance-following-hurricane-irma-","dir":"Articles","previous_headings":"More Examples","what":"Example: Determine how much money was awarded by FEMA for rental assistance following Hurricane Irma.","title":"rfema: Getting Started","text":"Get dataset description HousingAssistanceRenters data set see right data set question See columns can filter select just Hurricane Irma related grants data set disasterNumber. Thus, filter specific disaster load FemaWebDisasterDeclarations data find disaster number associated event interested . can see immediately disaster numbers uniquely identify event, since multiple disaster declarations may declared event, different locations. Thus filter particular event, need collect disaster declaration numbers corresponding event (case Hurricane Irma). Now read filter API call HousingAssistanceRenters data set. Check returned data Now can answer original question: much FEMA awarded rental assistance following Hurricane Irma?","code":"# get meta data for the `HousingAssistanceRenters` ds <- fema_data_sets()  ds <- ds[which(ds$name == \"HousingAssistanceRenters\"),] # there are two entries corresponding to two versions of the data set,  # we want the most recent one nrow(ds) ## [1] 2 ds <- ds[which(ds$version == max(as.numeric(ds$version))),] # now print out the data set description and make sure its the data set  # that applicable or our research question print(ds$description) ## [1] \"The dataset was generated by FEMA’s Enterprise Coordination & Information Management (ECIM) Reporting team and is primarily composed of data from Housing Assistance Program reporting authority from FEMA registration renters and owners within the state, county, zip where the registration is valid. \\n\\nThis dataset contains aggregated, non-PII data on FEMA’s Housing Assistance Program within the state, county, zip where the registration is valid for the declarations, starting with disaster declarations number 4116.  The data is divided into data for renters and data for property owners. Additional core data elements include number of applicants, county, zip code, severity of damage, owner or renter. Data is self-reported and as such is subject to human error. To learn more about disaster assistance please visit https://www.fema.gov/individual-disaster-assistance.\\n\\nThis is raw, unedited data from FEMA's National Emergency Management Information System (NEMIS) and as such is subject to a small percentage of human error. For example, when an applicant registers they enter their street and city address.  The system runs a check and suggests a county.  The applicant, if registering online can override that choice.  If they are registering via the call center the Human Services Specialist (HSS) representatives are instructed to ask (not offer) what county they live in.  So even though the system might suggest County A,  an applicant has the right to choose County B.  \\n\\nThe financial information is derived from NEMIS and not FEMA's official financial systems.  Due to differences in reporting periods, status of obligations and how business rules are applied, this financial information may differ slightly from official publication on public websites such as usaspending.gov;  this dataset is not intended to be used for any official federal financial reporting.\\n\\nCitation: The Agency’s preferred citation for datasets (API usage or file downloads) can be found on the OpenFEMA Terms and Conditions page, Citing Data section: https://www.fema.gov/about/openfema/terms-conditions.\\n\\nIf you have media inquiries about this dataset, please email the FEMA News Desk FEMA-News-Desk@fema.dhs.gov or call (202) 646-3272.  For inquiries about FEMA's data and Open government program please contact the OpenFEMA team via email OpenFEMA@fema.dhs.gov.\" # see which parameter can be used for filtering the Housing Assistance for Renters  valid_parameters(\"HousingAssistanceRenters\") ## # A tibble: 21 × 1 ##    params                     ##    <chr>                      ##  1 disasterNumber             ##  2 state                      ##  3 county                     ##  4 city                       ##  5 zipCode                    ##  6 validRegistrations         ##  7 totalInspected             ##  8 totalInspectedWithNoDamage ##  9 totalWithModerateDamage    ## 10 totalWithMajorDamage       ## # … with 11 more rows # call the disaster declarations dd <- rfema::open_fema(data_set = \"FemaWebDisasterDeclarations\", ask_before_call = F) ##  Obtaining Data: 1 out of 5 iterations (20% complete) Obtaining Data: 2 out of 5 iterations (40% ## complete) Obtaining Data: 3 out of 5 iterations (60% complete) Obtaining Data: 4 out of 5 iterations ## (80% complete) Obtaining Data: 5 out of 5 iterations (100% complete) # filter disaster declarations to those with \"hurricane\" in the name hurricanes <- distinct(dd %>% filter(grepl(\"hurricane\",tolower(disasterName))) %>% select(disasterName, disasterNumber)) hurricanes ## # A tibble: 393 × 2 ##    disasterName     disasterNumber ##    <chr>            <chr>          ##  1 HURRICANE IDALIA 4734           ##  2 HURRICANE IDALIA 4738           ##  3 HURRICANE LANE   3399           ##  4 HURRICANE IAN    4673           ##  5 HURRICANE HENRI  3563           ##  6 HURRICANE LEE    3599           ##  7 HURRICANE LEE    3598           ##  8 HURRICANE IDALIA 3597           ##  9 HURRICANE NICOLE 4680           ## 10 HURRICANE IAN    4677           ## # … with 383 more rows # get all disaster declarations associated with hurricane irma.  # notice the use of grepl() which picked up a disaster declaration name  # that was different than all the others. dd_irma <- hurricanes %>% filter(grepl(\"irma\",tolower(disasterName))) dd_irma ## # A tibble: 13 × 2 ##    disasterName                               disasterNumber ##    <chr>                                      <chr>          ##  1 HURRICANE IRMA                             4346           ##  2 HURRICANE IRMA - SEMINOLE TRIBE OF FLORIDA 4341           ##  3 HURRICANE IRMA                             4338           ##  4 HURRICANE IRMA                             3389           ##  5 HURRICANE IRMA                             4337           ##  6 HURRICANE IRMA                             4336           ##  7 HURRICANE IRMA                             3388           ##  8 HURRICANE IRMA                             3387           ##  9 HURRICANE IRMA                             3386           ## 10 HURRICANE IRMA                             4335           ## 11 HURRICANE IRMA                             3385           ## 12 HURRICANE IRMA                             3384           ## 13 HURRICANE IRMA                             3383 # get a vector of just the disaster declaration numbers dd_nums_irma <- dd_irma$disasterNumber # construct filter list filter_list <- list(disasterNumber = dd_nums_irma)  # make the API call to get individual assistance grants awarded to renters for hurricane Irma damages. assistance_irma <- open_fema(data_set = \"HousingAssistanceRenters\", filters = filter_list, ask_before_call = F) ##  Obtaining Data: 1 out of 6 iterations (16.67% complete) Obtaining Data: 2 out of 6 iterations ## (33.33% complete) Obtaining Data: 3 out of 6 iterations (50% complete) Obtaining Data: 4 out of 6 ## iterations (66.67% complete) Obtaining Data: 5 out of 6 iterations (83.33% complete) Obtaining Data: ## 6 out of 6 iterations (100% complete) # check out the returned data assistance_irma ## # A tibble: 5,358 × 21 ##    disasterNum…¹ state county city  zipCode valid…² total…³ total…⁴ total…⁵ total…⁶ total…⁷ appro…⁸ ##    <chr>         <chr> <chr>  <chr> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   ##  1 4335          VI    St. J… ST J… 00083   1       0       1       0       0       0       1       ##  2 4335          VI    St. T… CHAL… 00801   1       0       1       0       0       0       0       ##  3 4335          VI    St. T… CHAR… 00801   1       1       1       0       0       0       0       ##  4 4335          VI    St. T… CHAR… 00801   10      8       6       3       0       0       5       ##  5 4335          VI    St. T… CHAR… 00801   1       1       1       0       0       0       1       ##  6 4335          VI    St. T… CHAR… 00801   1       1       1       0       0       0       1       ##  7 4335          VI    St. T… SAIN… 00801   7       6       7       0       0       0       1       ##  8 4335          VI    St. T… STT   00801   1       1       1       0       0       0       0       ##  9 4335          VI    St. T… STTH… 00801   6       4       4       2       0       0       2       ## 10 4335          VI    St. T… ST T… 00801   219     181     142     66      10      0       126     ## # … with 5,348 more rows, 9 more variables: totalApprovedIhpAmount <chr>, ## #   repairReplaceAmount <chr>, rentalAmount <chr>, otherNeedsAmount <chr>, ## #   approvedBetween1And10000 <chr>, approvedBetween10001And25000 <chr>, ## #   approvedBetween25001AndMax <chr>, totalMaxGrants <chr>, id <chr>, and abbreviated variable ## #   names ¹​disasterNumber, ²​validRegistrations, ³​totalInspected, ⁴​totalInspectedWithNoDamage, ## #   ⁵​totalWithModerateDamage, ⁶​totalWithMajorDamage, ⁷​totalWithSubstantialDamage, ## #   ⁸​approvedForFemaAssistance # sum the rentalAmount Column rent_assistance <- sum(as.numeric(assistance_irma$rentalAmount))  # scale to millions rent_assistance <- rent_assistance/1000000  print(paste0(\"$\",round(rent_assistance,2),              \" million was awarded by FEMA for rental assistance following Hurricane Irma\")) ## [1] \"$314.64 million was awarded by FEMA for rental assistance following Hurricane Irma\""},{"path":"https://docs.ropensci.org/rfema/articles/getting_started.html","id":"clean-one-of-the-data-sets-with-a-nested-structure","dir":"Articles","previous_headings":"","what":"Clean one of the data sets with a nested structure","title":"rfema: Getting Started","text":"data sets get returned FEMA API nested format. Data Integrated Public Alert & Warning System (IPAWS) one example . See example first column IPAWS data set, XML data returned character. useful information data set first column, isn’t form useful R users. following one method converting xml data tabular form.","code":"# get the first ten entries from the IPAWS data set ipaws <- rfema::open_fema(\"IpawsArchivedAlerts\", top_n = 100)   ipaws ## # A tibble: 100 × 18 ##    originalM…¹ ident…² sender sent  status msgType source scope restr…³ addre…⁴ code  note  searc…⁵ ##    <chr>       <chr>   <chr>  <chr> <chr>  <chr>   <chr>  <chr> <chr>   <chr>   <chr> <chr> <chr>   ##  1 \"<?xml ver… NWS-14… w-nws… 2016… Actual Cancel  NULL   Publ… NULL    NULL    \"lis… NULL  \"NULL\"  ##  2 \"<?xml ver… NWS-14… w-nws… 2016… Actual Alert   NULL   Publ… NULL    NULL    \"lis… NULL  \"list(… ##  3 \"<?xml ver… NWS-14… w-nws… 2016… Actual Alert   NULL   Publ… NULL    NULL    \"lis… NULL  \"list(… ##  4 \"<?xml ver… NWS-14… w-nws… 2016… Actual Cancel  NULL   Publ… NULL    NULL    \"lis… NULL  \"list(… ##  5 \"<?xml ver… NWS-14… w-nws… 2016… Actual Update  NULL   Publ… NULL    NULL    \"lis… NULL  \"list(… ##  6 \"<?xml ver… NWS-14… w-nws… 2016… Actual Alert   NULL   Publ… NULL    NULL    \"lis… NULL  \"NULL\"  ##  7 \"<?xml ver… NWS-14… w-nws… 2016… Actual Alert   NULL   Publ… NULL    NULL    \"lis… NULL  \"list(… ##  8 \"<?xml ver… NWS-14… w-nws… 2016… Actual Alert   NULL   Publ… NULL    NULL    \"lis… NULL  \"list(… ##  9 \"<?xml ver… NWS-14… w-nws… 2016… Actual Update  NULL   Publ… NULL    NULL    \"lis… NULL  \"NULL\"  ## 10 \"<?xml ver… NWS-14… w-nws… 2016… Actual Update  NULL   Publ… NULL    NULL    \"lis… NULL  \"NULL\"  ## # … with 90 more rows, 5 more variables: incidents <chr>, cogId <chr>, id <chr>, xmlns <chr>, ## #   info <chr>, and abbreviated variable names ¹​originalMessage, ²​identifier, ³​restriction, ## #   ⁴​addresses, ⁵​searchGeometry library(dplyr) library(XML)  # create function to unnest the ipaws entries unnest_ipaws <- function(xml_entry){    # convert the raw xml data to a list   xml_data <- XML::xmlToList(xml_entry)    # get names of the list elements in xml data   names <- names(xml_data)    # get a summary of the data to id which elements are nested   data_sum <- summary(xml_data)    # put all the non nested elements into a data frame   df <- data.frame(xml_data[names[which(as.numeric(data_sum[,1]) == 1)]])    # get vector of elements that need to be unnested   needs_unnesting <- which(as.numeric(data_sum[,1]) > 1)    # loop over the elements identified above   for(k in needs_unnesting){      # unlist the nested data     unlisted_data <- t(unlist(xml_data[k], recursive = T, use.names = T))      # store the unlisted data as a data frame     temp_df <- data.frame(unlisted_data)      # add the unnested data frame to the existing \"df\" data frame     df <- cbind.data.frame(df,temp_df)   }    return(df)  }  # get the first 100 entries from the IPAWS alerts data set ipaws <- rfema::open_fema(\"IpawsArchivedAlerts\", top_n = 100)  # apply the `unnest_ipaws` function over all the XML entries in the returned `ipaws` object ipaws_list <- sapply(ipaws$originalMessage, unnest_ipaws, simplify = T)  # convert the `ipaws_list` into a data frame ipaws_df <- dplyr::bind_rows(ipaws_list)  # the number of columns can get unwieldy because of all the unique pieces of information # in that \"info\" element that get tacked on  # dropping the geocoding columns could help simplify ipaws_df <- ipaws_df %>% select(-contains(\"geocode\"))  # dropping the \"parameter value\" columns would also help # (depending on if those are needed or not) ipaws_df <- ipaws_df %>% select(-contains(\"parameter.value\"))  # view the final data as_tibble(ipaws_df) ## # A tibble: 100 × 37 ##    identi…¹ sender sent  status msgType scope code  refer…² info.…³ info.…⁴ info.…⁵ info.…⁶ info.…⁷ ##    <chr>    <chr>  <chr> <chr>  <chr>   <chr> <chr> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   ##  1 NWS-141… w-nws… 2016… Actual Cancel  Publ… IPAW… w-nws.… Met     Small … Avoid   Expect… Minor   ##  2 NWS-141… w-nws… 2016… Actual Alert   Publ… IPAW… <NA>    Met     Severe… Shelter Immedi… Severe  ##  3 NWS-141… w-nws… 2016… Actual Alert   Publ… IPAW… <NA>    Met     Specia… Execute Expect… Modera… ##  4 NWS-141… w-nws… 2016… Actual Cancel  Publ… IPAW… w-nws.… Met     Severe… Shelter Immedi… Severe  ##  5 NWS-141… w-nws… 2016… Actual Update  Publ… IPAW… w-nws.… Met     Severe… Shelter Immedi… Severe  ##  6 NWS-141… w-nws… 2016… Actual Alert   Publ… IPAW… <NA>    Met     Beach … Avoid   Expect… Modera… ##  7 NWS-141… w-nws… 2016… Actual Alert   Publ… IPAW… <NA>    Met     Severe… Shelter Immedi… Severe  ##  8 NWS-141… w-nws… 2016… Actual Alert   Publ… IPAW… <NA>    Met     Marine… Monitor Expect… Minor   ##  9 NWS-141… w-nws… 2016… Actual Update  Publ… IPAW… w-nws.… Met     Small … Avoid   Expect… Minor   ## 10 NWS-141… w-nws… 2016… Actual Update  Publ… IPAW… w-nws.… Met     Hazard… Avoid   Expect… Modera… ## # … with 90 more rows, 24 more variables: info.certainty <chr>, info.eventCode.valueName <chr>, ## #   info.eventCode.value <chr>, info.eventCode.valueName.1 <chr>, info.eventCode.value.1 <chr>, ## #   info.effective <chr>, info.onset <chr>, info.expires <chr>, info.senderName <chr>, ## #   info.headline <chr>, info.description <chr>, info.instruction <chr>, info.web <chr>, ## #   info.area.areaDesc <chr>, Signature.SignedInfo.CanonicalizationMethod.Algorithm <chr>, ## #   Signature.SignedInfo.SignatureMethod.Algorithm <chr>, ## #   Signature.SignedInfo.Reference.Transforms.Transform.Algorithm <chr>, …"},{"path":"https://docs.ropensci.org/rfema/articles/getting_started.html","id":"bulk-downloads","dir":"Articles","previous_headings":"","what":"Bulk Downloads","title":"rfema: Getting Started","text":"cases bulk downloading full data set file may preferred. particularly large data requests, usually faster bulk download entire data set csv file load R environment. case, users can use bulk_dl() command download csv full data file save specified directory.","code":"bulk_dl(\"femaRegions\") # download a csv file containing all info on FEMA regions"},{"path":"https://docs.ropensci.org/rfema/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dylan Turner. Author, maintainer. François Michonneau. Reviewer, contributor.            reviewed package rOpenSci patched several bugs prelease code, see https://github.com/ropensci/software-review/issues/484. Marcus Beck. Reviewer, contributor.            reviewed package rOpenSci, see https://github.com/ropensci/software-review/issues/484.","code":""},{"path":"https://docs.ropensci.org/rfema/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Turner, D. 2022. rfema:Access openFEMA API. rOpenSci, avaliable https://github.com/ropensci/rfema","code":"@Article{,   title = {rfema: Access the openFEMA API},   author = {Dylan Turner},   journal = {rOpenSci},   year = {2022},   url = {https://github.com/ropensci/rfema}, }"},{"path":"https://docs.ropensci.org/rfema/index.html","id":"rfema-r-fema","dir":"","previous_headings":"","what":"Access the openFEMA API","title":"Access the openFEMA API","text":"Introduction rfema? Installation Usage","code":""},{"path":"https://docs.ropensci.org/rfema/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Access the openFEMA API","text":"rfema allows users access Federal Emergency Management Agency’s (FEMA) publicly available data open FEMA API. package provides set functions easily navigate access data sets provided FEMA, including (limited ) data National Flood Insurance Program FEMA’s various disaster aid programs. FEMA data publicly available open FEMA website available bulk download, however, files sometimes large (multiple gigabytes) many times users need records data series (example: many users may want records single state several years). Using FEMA’s API good option circumvent working bulk data files, can inaccessible without prior API experience. package contains set functions allows users easily identify retrieve data FEMA’s API without needing technical knowledge APIs. Notably, FEMA API require API key meaning package extremely accessible regardless user ever interacted API. rest page explains benefits package demonstrates basic usage package. looking depth examples use package workflow, consider reading Getting Started vignette. accordance Open Fema terms conditions: product uses Federal Emergency Management Agency’s Open FEMA API, endorsed FEMA. Federal Government FEMA vouch data analyses derived data data retrieved Agency’s website(s). Guidance FEMA’s preferred citation Open FEMA data can found : https://www.fema.gov//openfema/terms-conditions.","code":""},{"path":"https://docs.ropensci.org/rfema/index.html","id":"why-rfema","dir":"","previous_headings":"","what":"Why rfema?","title":"Access the openFEMA API","text":"advantages accessing FEMA API rfema package compared accessing API directly? short, rfema package handles much grunt work associated constructing API queries, dealing API limits, applying filters parameters. Suppose one wants obtain data flood insurance claims Florida 2020. following code obtains data without use rfema package. can seen requires quite lines code, part due API limiting calls 1000 records per call can make obtaining full data set cumbersome. Compare block code following code obtains data using rfema package. rfema package allows request made two lines code. Notably, open_fema() function handles checking number records implements iterative loop deal 1000 records/call limit. rfema package also returns data, possible, formats easier work . example, functions return data tibble date columns converted POSIX format. makes plotting time series easy API call can piped directly ggplot plot. example, following plot number FEMA disaster declarations response hurricanes since 2010, separated Florida versus rest United States. application date data required, block code can rerun plot date data FEMA API.","code":"# Code needed to obtain data on flood insurance claims in FL without the rfema package ------------------  # define the url for the appropriate api end point base_url <- \"https://www.fema.gov/api/open/v2/FimaNfipClaims\"  # append the base_url to apply filters filters <- \"?$inlinecount=allpages&$filter=(state%20eq%20'FL')%20and%20(yearOfLoss%20eq%202020)\"  api_query <- paste0(base_url, filters)  # run a query setting the top_n parameter to 1 to check how many records match the filters record_check_query <- \"https://www.fema.gov/api/open/v2/FimaNfipClaims?$inlinecount=allpages&$top=1&$filter=(state%20eq%20'FL')%20and%20(yearOfLoss%20eq%202020)\"  # run the api call and determine the number of matching records result <- httr::GET(record_check_query) jsonData <- httr::content(result)         n_records <- jsonData$metadata$count   # calculate number of calls neccesary to get all records using the  # 1000 records/ call max limit defined by FEMA iterations <- ceiling(n_records / 1000)  # initialize a skip counter which will indicate where in the full  # data set each API call needs to start from. skip <- 0  # make however many API calls are neccesary to get the full data set for (i in seq(from = 1, to = iterations, by = 1)) {   # As above, if you have filters, specific fields, or are sorting, add   # that to the base URL or make sure it gets concatenated here.   result <- httr::GET(paste0(api_query, \"&$skip=\", (i - 1) * 1000))   if (result$status_code != 200) {     status <- httr::http_status(result)     stop(status$message)   }   json_data <- httr::content(result)[[2]]      # for data returned as a list of lists, correct any discrepancies   # in the length of the lists by adding NA values to the shorter lists      # calculate longest list   max_list_length <- max(sapply(json_data, length))      # add NA values to lists shorter than the max list length   json_data <- lapply(json_data, function(x) {     c(x, rep(NA, max_list_length - length(x)))   })      if (i == 1) {     # bind the data into a single data frame     data <- data.frame(do.call(rbind, json_data))   } else {     data <- dplyr::bind_rows(       data,       data.frame(do.call(rbind, json_data))     )   } }    # remove the html line breaks from returned data frame (if there are any)   data <- as_tibble(lapply(data, function(data) gsub(\"\\n\", \"\", data)))  # view the retrieved data data ## # A tibble: 9,986 × 73 ##    agriculture…¹ asOfD…² basem…³ polic…⁴ crsCl…⁵ dateO…⁶ eleva…⁷ eleva…⁸ eleva…⁹ ##    <chr>         <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   ##  1 FALSE         2021-0… 0       1       5       2020-0… FALSE   NULL    1       ##  2 FALSE         2023-0… 0       1       6       2020-0… FALSE   1       NULL    ##  3 FALSE         2020-0… 2       1       7       2020-0… TRUE    3       -6      ##  4 FALSE         2022-0… 0       1       6       2020-0… FALSE   1       NULL    ##  5 FALSE         2023-0… 1       1       10      2020-0… FALSE   3       1       ##  6 FALSE         2023-0… NULL    1       6       2020-0… TRUE    NULL    0       ##  7 FALSE         2020-0… NULL    1       6       2020-0… FALSE   NULL    7       ##  8 FALSE         2022-1… 0       1       7       2020-0… FALSE   NULL    NULL    ##  9 FALSE         2022-1… 0       1       5       2020-0… FALSE   1       NULL    ## 10 FALSE         2023-0… 0       1       5       2020-0… FALSE   NULL    4       ## # … with 9,976 more rows, 64 more variables: baseFloodElevation <chr>, ## #   ratedFloodZone <chr>, houseWorship <chr>, locationOfContents <chr>, ## #   lowestAdjacentGrade <chr>, lowestFloorElevation <chr>, ## #   numberOfFloorsInTheInsuredBuilding <chr>, nonProfitIndicator <chr>, ## #   obstructionType <chr>, occupancyType <chr>, originalConstructionDate <chr>, ## #   originalNBDate <chr>, amountPaidOnBuildingClaim <chr>, ## #   amountPaidOnContentsClaim <chr>, … # define a list of filters to apply filterList <- list(state = \"FL\",yearOfLoss = \"= 2020\")  # Make the API call using the `open_fema` function. The function will output a  # status message to the console letting you monitor the progress of the data retrieval. data <- open_fema(data_set = \"fimaNfipClaims\",ask_before_call = F, filters = filterList)  # view data data ## # A tibble: 9,986 × 73 ##    agriculture…¹ asOfDate            basem…² polic…³ crsCl…⁴ dateOfLoss          ##    <chr>         <dttm>              <chr>   <chr>   <chr>   <dttm>              ##  1 FALSE         2021-03-30 00:00:00 0       1       5       2020-01-02 00:00:00 ##  2 FALSE         2023-06-01 00:00:00 0       1       6       2020-01-03 00:00:00 ##  3 FALSE         2020-07-17 00:00:00 2       1       7       2020-01-02 00:00:00 ##  4 FALSE         2022-09-11 00:00:00 0       1       6       2020-01-05 00:00:00 ##  5 FALSE         2023-02-14 00:00:00 1       1       10      2020-01-09 00:00:00 ##  6 FALSE         2023-03-03 00:00:00 NULL    1       6       2020-01-01 00:00:00 ##  7 FALSE         2020-04-20 00:00:00 NULL    1       6       2020-01-11 00:00:00 ##  8 FALSE         2022-11-16 00:00:00 0       1       7       2020-01-04 00:00:00 ##  9 FALSE         2022-12-02 00:00:00 0       1       5       2020-01-12 00:00:00 ## 10 FALSE         2023-02-22 00:00:00 0       1       5       2020-01-21 00:00:00 ## # … with 9,976 more rows, 67 more variables: elevatedBuildingIndicator <chr>, ## #   elevationCertificateIndicator <chr>, elevationDifference <chr>, ## #   baseFloodElevation <chr>, ratedFloodZone <chr>, houseWorship <chr>, ## #   locationOfContents <chr>, lowestAdjacentGrade <chr>, ## #   lowestFloorElevation <chr>, numberOfFloorsInTheInsuredBuilding <chr>, ## #   nonProfitIndicator <chr>, obstructionType <chr>, occupancyType <chr>, ## #   originalConstructionDate <dttm>, originalNBDate <dttm>, … library(ggplot2) open_fema(\"DisasterDeclarationsSummaries\",                    filters = list(declarationDate = \">= 2010-01-01\",                                  incidentType = \"Hurricane\"),                    ask_before_call = F) %>%    mutate(date = lubridate::floor_date(declarationDate,\"year\"),count = 1,          Florida = factor(state == \"FL\")) %>%   select(date,count,Florida) %>%   group_by(date,Florida) %>%   summarise(count = sum(count)) %>%   ggplot(., aes(fill=Florida, y=count, x=date)) +      geom_bar(position=\"stack\", stat=\"identity\") +   scale_fill_manual(name = \"\",values = c(\"grey80\",\"forestgreen\"),drop = FALSE,                     labels = c(\"Rest of U.S.\",\"Florida\")) +   labs(x = \"year\",y = \"\",        title = \"County Level FEMA Disaster Declarations for Hurricanes\") +   theme_light()"},{"path":"https://docs.ropensci.org/rfema/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Access the openFEMA API","text":"Right now, best way install use rfema package installing directly rOpenSci using install.packages(\"rfema\", repos = \"https://ropensci.r-universe.dev\"). FEMA API require API key, meaning setup steps need taken start using package.","code":""},{"path":"https://docs.ropensci.org/rfema/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Access the openFEMA API","text":"unfamiliar data sets available FEMA API, good starting place visit FEMA API documentation page. However, already familiar data want quickly reference data set names another piece meta data, using fema_data_sets() function obtain tibble available data sets along associated meta data convenient option. name data set want, simply pass argument open_fema() function return data set tibble. default, open_fema() warn number records greater 1000 present estimated time required complete records request. user, asked confirm want retrieve available records (many data sets total records quite large). turn feature, set parameter ask_before_call equal FALSE. limit number records returned, specify top_n argument. useful exploring data set without retrieving records. variety ways precisely target data want retrieve specifying many records want returned, specifying columns data set return, applying filters columns data set. information examples use cases, see Getting Started vignette. Please note rfema released Contributor Code Conduct. contributing package agree abide terms.","code":"# store meta data for the available data sets as an object in the R environment data_sets <- fema_data_sets()  # view the just retrieved data data_sets ## # A tibble: 51 × 35 ##    identif…¹ name  title descr…² webSe…³ dataD…⁴ keyword modif…⁵ publi…⁶ conta…⁷ ##    <chr>     <chr> <chr> <chr>   <chr>   <chr>   <list>  <chr>   <chr>   <chr>   ##  1 openfema… Fema… FEMA… \"This … https:… https:… <list>  2023-0… Federa… OpenFE… ##  2 openfema… Ipaw… IPAW… \"The I… https:… https:… <list>  2020-0… Federa… OpenFE… ##  3 openfema… Regi… Regi… \"This … https:… https:… <list>  2023-0… Federa… OpenFE… ##  4 openfema… Regi… Regi… \"This … https:… https:… <list>  2023-1… Federa… OpenFE… ##  5 openfema… Fema… FEMA… \"This … https:… https:… <list>  2023-0… Federa… OpenFE… ##  6 openfema… Haza… Haza… \"The d… https:… https:… <list>  2023-1… Federa… OpenFE… ##  7 openfema… Hous… Hous… \"This … https:… https:… <list>  2023-0… Federa… OpenFE… ##  8 openfema… Hous… Hous… \"The d… https:… https:… <list>  2023-0… Federa… OpenFE… ##  9 openfema… Indi… Indi… \"This … https:… https:… <list>  2020-0… Federa… OpenFE… ## 10 openfema… Miss… Miss… \"1.1 W… https:… https:… <list>  2023-0… Federa… OpenFE… ## # … with 41 more rows, 25 more variables: mbox <chr>, accessLevel <chr>, ## #   landingPage <list>, temporal <list>, api <lgl>, version <int>, ## #   bureauCode <chr>, programCode <chr>, license <list>, theme <list>, ## #   dataQuality <chr>, accrualPeriodicity <list>, language <chr>, ## #   references <list>, issued <list>, recordCount <list>, depDate <list>, ## #   depApiMessage <list>, depWebMessage <list>, depNewURL <list>, hash <chr>, ## #   lastRefresh <chr>, id <chr>, lastDataSetRefresh <list>, … # obtain the first 10 records from the fimaNfipClaims data set. # Note: the data_set argument is not case sensative retrieved_data <- open_fema(data_set = \"fimanfipclaims\", top_n = 10)  # view the data retrieved_data ## # A tibble: 10 × 73 ##    agriculture…¹ asOfDate            basem…² polic…³ crsCl…⁴ dateOfLoss          ##    <chr>         <dttm>              <chr>   <chr>   <chr>   <dttm>              ##  1 FALSE         2020-01-22 00:00:00 NULL    1       8       1998-02-07 00:00:00 ##  2 FALSE         2020-01-22 00:00:00 NULL    1       8       2005-08-29 00:00:00 ##  3 FALSE         2020-01-22 00:00:00 NULL    1       9       1998-09-28 00:00:00 ##  4 FALSE         2019-09-19 00:00:00 1       1       9       1994-10-07 00:00:00 ##  5 FALSE         2019-09-19 00:00:00 NULL    1       8       1996-03-11 00:00:00 ##  6 FALSE         2020-01-22 00:00:00 NULL    1       NULL    1998-02-03 00:00:00 ##  7 FALSE         2020-01-22 00:00:00 NULL    1       5       2017-08-27 00:00:00 ##  8 FALSE         2019-10-19 00:00:00 NULL    1       NULL    1992-09-11 00:00:00 ##  9 FALSE         2019-10-19 00:00:00 NULL    1       8       1998-09-28 00:00:00 ## 10 FALSE         2019-09-19 00:00:00 NULL    1       8       1995-03-11 00:00:00 ## # … with 67 more variables: elevatedBuildingIndicator <chr>, ## #   elevationCertificateIndicator <chr>, elevationDifference <chr>, ## #   baseFloodElevation <chr>, ratedFloodZone <chr>, houseWorship <chr>, ## #   locationOfContents <chr>, lowestAdjacentGrade <chr>, ## #   lowestFloorElevation <chr>, numberOfFloorsInTheInsuredBuilding <chr>, ## #   nonProfitIndicator <chr>, obstructionType <chr>, occupancyType <chr>, ## #   originalConstructionDate <dttm>, originalNBDate <dttm>, …"},{"path":"https://docs.ropensci.org/rfema/paper.html","id":null,"dir":"","previous_headings":"","what":"Summary","title":"Summary","text":"Summary ","code":""},{"path":"https://docs.ropensci.org/rfema/paper.html","id":"statement-of-need","dir":"","previous_headings":"","what":"Statement of need","title":"Summary","text":"Statement Need ","code":""},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/rfema/reference/bulk_dl.html","id":null,"dir":"Reference","previous_headings":"","what":"Bulk download full open FEMA data sets as .csv files — bulk_dl","title":"Bulk download full open FEMA data sets as .csv files — bulk_dl","text":"large data requests, can sometimes practical (quicker) download work entire data set. function provides easy way download FEMA's data sets entirety save locally csv file.","code":""},{"path":"https://docs.ropensci.org/rfema/reference/bulk_dl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bulk download full open FEMA data sets as .csv files — bulk_dl","text":"","code":"bulk_dl(data_set, output_dir = NULL, file_name = NULL, size_warning = TRUE)"},{"path":"https://docs.ropensci.org/rfema/reference/bulk_dl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bulk download full open FEMA data sets as .csv files — bulk_dl","text":"data_set character string indicating name data set download output_dir optional character string indicating directory (defaults working directory) file_name optional character string indicating file name (defaults data set name time stamp) size_warning logical indicating whether issue warning proceeding downloading large file (default TRUE)","code":""},{"path":"https://docs.ropensci.org/rfema/reference/bulk_dl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bulk download full open FEMA data sets as .csv files — bulk_dl","text":"Returns downloaded csv file data set specified output directory.","code":""},{"path":"https://docs.ropensci.org/rfema/reference/bulk_dl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bulk download full open FEMA data sets as .csv files — bulk_dl","text":"","code":"if (FALSE) { bulk_dl(\"femaregions\") # download the file } if (FALSE) { file.remove(\"FemaRegions.csv\") # clean up directory after file downloads }"},{"path":"https://docs.ropensci.org/rfema/reference/fema_data_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data fields and descriptions for a given FEMA data set — fema_data_fields","title":"Get data fields and descriptions for a given FEMA data set — fema_data_fields","text":"Get data fields descriptions given FEMA data set","code":""},{"path":"https://docs.ropensci.org/rfema/reference/fema_data_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data fields and descriptions for a given FEMA data set — fema_data_fields","text":"","code":"fema_data_fields(data_set)"},{"path":"https://docs.ropensci.org/rfema/reference/fema_data_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data fields and descriptions for a given FEMA data set — fema_data_fields","text":"data_set character string indicating data set interest","code":""},{"path":"https://docs.ropensci.org/rfema/reference/fema_data_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data fields and descriptions for a given FEMA data set — fema_data_fields","text":"Returns tibble consisting data fields name, along information data field including data type, description data field, whether data field \"searchable\" (.e. can used filter returned data API query)","code":""},{"path":"https://docs.ropensci.org/rfema/reference/fema_data_fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data fields and descriptions for a given FEMA data set — fema_data_fields","text":"","code":"if (FALSE) { fema_data_fields(\"FimaNfipClaims\") } if (FALSE) { fema_data_fields(\"FimaNfipPolicies\") }"},{"path":"https://docs.ropensci.org/rfema/reference/fema_data_sets.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a tibble of available FEMA data sets — fema_data_sets","title":"Get a tibble of available FEMA data sets — fema_data_sets","text":"Get tibble available FEMA data sets","code":""},{"path":"https://docs.ropensci.org/rfema/reference/fema_data_sets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a tibble of available FEMA data sets — fema_data_sets","text":"","code":"fema_data_sets()"},{"path":"https://docs.ropensci.org/rfema/reference/fema_data_sets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a tibble of available FEMA data sets — fema_data_sets","text":"Returns tibble containing meta data data set available FEMA API. information see FEMA documentation page: https://www.fema.gov//openfema/data-sets.","code":""},{"path":"https://docs.ropensci.org/rfema/reference/fema_data_sets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a tibble of available FEMA data sets — fema_data_sets","text":"","code":"if (FALSE) { fema_data_sets() }"},{"path":"https://docs.ropensci.org/rfema/reference/open_fema.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from the FEMA API — open_fema","title":"Get data from the FEMA API — open_fema","text":"function allows users pull data directly FEMA API returned data frame natively within R.FEMA API limits single query 1000 records, thus query resulting 1000 records, iterative approach necessary get records. function handles , default, warn user many iterations needed get records matching query, letting user decide choose whether continue.","code":""},{"path":"https://docs.ropensci.org/rfema/reference/open_fema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from the FEMA API — open_fema","text":"","code":"open_fema(   data_set,   top_n = NULL,   filters = NULL,   select = NULL,   ask_before_call = TRUE,   file_type = NULL,   output_dir = NULL )"},{"path":"https://docs.ropensci.org/rfema/reference/open_fema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from the FEMA API — open_fema","text":"data_set character string indicating data set get data top_n optional integer value specify maximum number matching records return filters optional list containing values data fields contained data set construct filters select optional character vector specify data fields return (default return data fields) ask_before_call logical indicating users asked like proceed API call results large number records (default T). file_type optional character string specifies file type save data (options \"csv\" \"rds\"). file specified, function return api call data frame output_dir optional character string specifying directory save exported file file_type specified (defaults working directory).","code":""},{"path":"https://docs.ropensci.org/rfema/reference/open_fema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data from the FEMA API — open_fema","text":"Returns tibble containing data FEMA API.","code":""},{"path":"https://docs.ropensci.org/rfema/reference/open_fema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data from the FEMA API — open_fema","text":"","code":"if (FALSE) { data <- open_fema(   data_set = \"fimaNfipClaims\", top_n = 100,   filters = list(countyCode = \"10001\") ) }"},{"path":"https://docs.ropensci.org/rfema/reference/parameter_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns examples of data field values along with a description of the data field — parameter_values","title":"Returns examples of data field values along with a description of the data field — parameter_values","text":"Returns examples data field values along description data field","code":""},{"path":"https://docs.ropensci.org/rfema/reference/parameter_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns examples of data field values along with a description of the data field — parameter_values","text":"","code":"parameter_values(data_set = NULL, data_field = NULL, message = TRUE)"},{"path":"https://docs.ropensci.org/rfema/reference/parameter_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns examples of data field values along with a description of the data field — parameter_values","text":"data_set character vector specifying data set data_field character vector specifying data field message logical value TRUE default. TRUE, function return information console message. set FALSE, function return information tibble.","code":""},{"path":"https://docs.ropensci.org/rfema/reference/parameter_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns examples of data field values along with a description of the data field — parameter_values","text":"returns consoles message providing description data field several example values data field within data set.","code":""},{"path":"https://docs.ropensci.org/rfema/reference/parameter_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns examples of data field values along with a description of the data field — parameter_values","text":"","code":"if (FALSE) { parameter_values(   data_set = \"fimaNfipClaims\",   data_field = \"totalBuildingInsuranceCoverage\" ) }"},{"path":"https://docs.ropensci.org/rfema/reference/valid_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all valid API parameters for a given FEMA data set — valid_parameters","title":"Get all valid API parameters for a given FEMA data set — valid_parameters","text":"Get valid API parameters given FEMA data set","code":""},{"path":"https://docs.ropensci.org/rfema/reference/valid_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all valid API parameters for a given FEMA data set — valid_parameters","text":"","code":"valid_parameters(data_set = NULL)"},{"path":"https://docs.ropensci.org/rfema/reference/valid_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all valid API parameters for a given FEMA data set — valid_parameters","text":"data_set character string indicating data set return valid parameters ","code":""},{"path":"https://docs.ropensci.org/rfema/reference/valid_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all valid API parameters for a given FEMA data set — valid_parameters","text":"Returns tibble parameter names can used filter API call given open FEMA data set","code":""},{"path":"https://docs.ropensci.org/rfema/reference/valid_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all valid API parameters for a given FEMA data set — valid_parameters","text":"","code":"if (FALSE) { valid_parameters(\"fimaNfipPolicies\") }"},{"path":"https://docs.ropensci.org/rfema/news/index.html","id":"rfema-100-2022-01-10","dir":"Changelog","previous_headings":"","what":"rfema 1.0.0 (2022-01-10)","title":"rfema 1.0.0 (2022-01-10)","text":"Changes made version primarily result suggestions made package reviewed inclusion rOpensci suite packages. Thus, following summarizes suggestions made reviews suggestions dealt .","code":""},{"path":"https://docs.ropensci.org/rfema/news/index.html","id":"documentation-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"DOCUMENTATION FIXES","title":"rfema 1.0.0 (2022-01-10)","text":"following line added first paragraph README file: “Notably, FEMA API require API key meaning package extremely accessible regardless user ever interacted API.” Done. Readme vignette suggest fema_data_sets() function used quick references naive users start visiting FEMA API documentation page. help file fema_data_sets() also contains link documentation page now. kable() longer used present output documentation files. output now returned tibble making use kable() unnecessary truncating long blocks text. link R-CMD-check badge fixed point correct Github repo. bulk_dl() help file now description field. functions helpers.R files longer exported. end README file now link contributing file. Done. function help files use TRUE/FALSE now rather abbreviations T/F","code":""},{"path":"https://docs.ropensci.org/rfema/news/index.html","id":"minor-improvements-1-0-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"rfema 1.0.0 (2022-01-10)","text":"exported functions return objects now return data tibble. ask_before_call argument set TRUE open_fema function, addition outputting console message letting user know many individual API query iterations necessary retrieve data, message also present estimate time take . time estimate generated making 5 API queries background data_set specified open_fema, timing , extrapolating average time per query number queries needed get full set records user requesting. new helper function, time_iterations, handles process. new helper function written, convert_dates, takes returned data set attempts convert column “date” label POSIX format. done within open_fema function tibble returned user dates converted reaches . far can tell, way obtain unique values data set column without obtaining entire data set searching records. ’ve modified function make clear presented necessarily represent full range possible parameter values (data fields unique values detailed data sets description, universally true), instead just provides examples help user understand data set. function used, also suggests visiting FEMA documentation page information. Pull request accepted merged. functions memoized receive memoization .onLoad function now.","code":""},{"path":"https://docs.ropensci.org/rfema/news/index.html","id":"bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"rfema 1.0.0 (2022-01-10)","text":"Fixed. Fixed. message displayed iteration now looks like following: “Obtaining Data: 3 5 iterations (60% complete)” Done.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/rfema/news/index.html","id":"documentation-fixes-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"DOCUMENTATION FIXES","title":"rfema 0.0.0.9000 (2021-11-19)","text":"Added NEWS.md file.","code":""}]
